# Default values for microblog.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

microblog:
  replicaCount: 1

  image:
    repository: adiachan/microblog
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podAnnotations: {}

  podSecurityContext:
    {}
    # fsGroup: 2000

  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  healthcheck:
    enabled: true

  service:
    type: ClusterIP
    port: 80

  ingress:
    enabled: false
    className: ""
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

## @param commonAnnotations Common annotations to add to all Microblog resources (sub-charts are not considered). Evaluated as a template
##
commonAnnotations: {}
## @param commonLabels Common labels to add to all Microblog resources (sub-charts are not considered). Evaluated as a template
##
commonLabels: {}

persistence:
  enabled: false
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 8Gi
  existingClaim: ""
  hostPath: ""
  annotations: {}
  labels: {}

smtp:
  smtpHost: ""
  smtpPort: ""
  smtpUser: ""
  smtpPassword: ""
  smtpProtocol: ""
  mailUsername: ""

# Specify an external database
# Useful for managed offerings from your Cloud Provider
externalDatabase:
  port: 3306
  host: ""
  # Credentials
  database: ""
  user: ""
  password: ""
  existingSecret: ""

externalRedis:
  port: 6379
  host: ""
  password: ""
  existingSecret: ""

## External elasticsearch configuration
##
externalElasticsearch:
  ## @param externalElasticsearch.host Host of the external elasticsearch server
  ##
  host: ""
  ## @param externalElasticsearch.port Port of the external elasticsearch server
  ##
  port: 9200

mariadb:
  ## @param mariadb.enabled Whether to deploy a mariadb server to satisfy the applications database requirements
  ## To use an external database set this to false and configure the externalDatabase parameters
  ##
  enabled: true
  ## @param mariadb.architecture MariaDB architecture (`standalone` or `replication`)
  ##
  architecture: standalone
  ## MariaDB Authentication parameters
  ## @param mariadb.auth.rootPassword Password for the MariaDB `root` user
  ## @param mariadb.auth.database Database name to create
  ## @param mariadb.auth.username Database user to create
  ## @param mariadb.auth.password Password for the database
  ##
  auth:
    ## ref: https://github.com/bitnami/bitnami-docker-mariadb#setting-the-root-password-on-first-run
    ##
    rootPassword: ""
    ## ref: https://github.com/bitnami/bitnami-docker-mariadb/blob/master/README.md#creating-a-database-on-first-run
    ##
    database: microblog
    ## ref: https://github.com/bitnami/bitnami-docker-mariadb/blob/master/README.md#creating-a-database-user-on-first-run
    ##
    username: microblog
    password: ""
  primary:
    ## Enable persistence using Persistent Volume Claims
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ## @param mariadb.primary.persistence.enabled Enable database persistence using PVC
    ## @param mariadb.primary.persistence.storageClass MariaDB primary persistent volume storage Class
    ## @param mariadb.primary.persistence.accessModes Database Persistent Volume Access Modes
    ## @param mariadb.primary.persistence.size Database Persistent Volume Size
    ## @param mariadb.primary.persistence.hostPath Set path in case you want to use local host path volumes (not recommended in production)
    ## @param mariadb.primary.persistence.existingClaim Name of an existing `PersistentVolumeClaim` for MariaDB primary replicas
    ##
    persistence:
      enabled: true
      ## mariadb data Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      storageClass: ""
      accessModes:
        - ReadWriteOnce
      size: 8Gi
      hostPath: ""
      existingClaim: ""

## Configuration values for the Redis dependency sub-chart
## ref: https://github.com/bitnami/charts/blob/master/bitnami/redis/README.md
redis:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/redis
    tag: 6.2.6-debian-10-r21
  ## Redis&trade; Authentication parameters
  ## ref: https://github.com/bitnami/bitnami-docker-redis#setting-the-server-password-on-first-run
  ##
  auth:
    ## @param auth.enabled Enable password authentication
    ##
    enabled: true
    ## @param auth.sentinel Enable password authentication on sentinels too
    ##
    sentinel: true
    ## @param auth.password Redis&trade; password
    ## Defaults to a random 10-character alphanumeric string if not set
    ##
    password: ""
    ## @param auth.existingSecret The name of an existing secret with Redis&trade; credentials
    ## NOTE: When it's set, the previous `auth.password` parameter is ignored
    ##
    existingSecret: ""
    ## @param auth.existingSecretPasswordKey Password key to be retrieved from existing secret
    ## NOTE: ignored unless `auth.existingSecret` parameter is set
    ##
    existingSecretPasswordKey: ""
    ## @param auth.usePasswordFiles Mount credentials as files instead of using an environment variable
    ##
    usePasswordFiles: false
  replica:
    replicaCount: 1
  sentinel:
    enabled: false
  cluster:
    enabled: false
  metrics:
    enabled: true

## @section Elasticsearch parameters

## Elasticsearch chart configuration
## https://github.com/bitnami/charts/blob/master/bitnami/elasticsearch/values.yaml
##
elasticsearch:
  ## @param elasticsearch.enabled Whether to deploy a elasticsearch server to use as magento's search engine
  ## To use an external server set this to false and configure the externalElasticsearch parameters
  ##
  enabled: true
  ## @param elasticsearch.sysctlImage.enabled Enable kernel settings modifier image for Elasticsearch
  ##
  sysctlImage:
    enabled: true
  ## Elasticsearch master-eligible node parameters
  ## @param elasticsearch.master.replicas Desired number of Elasticsearch master-eligible nodes
  ##
  master:
    replicas: 1
  ## Elasticsearch coordinating-only node parameters
  ## @param elasticsearch.coordinating.replicas Desired number of Elasticsearch coordinating-only nodes
  ##
  coordinating:
    replicas: 1
  ## Elasticsearch data node parameters
  ## @param elasticsearch.data.replicas Desired number of Elasticsearch data nodes
  ##
  data:
    replicas: 1
